package datastructure;

import datastructure.LinkedList.Node;

public class BST {

	Node insertData(int x, Node root) {
		Node newNode = new Node(x);
		if (root == null) {
			root = newNode;
			newNode = root;
		} else {
			if (x < root.d) {
				root.left = insertData(x, root.left);
			} else {
				root.right = insertData(x, root.right);
			}

		}
		return root;
	}

/*	void display(Node root) {
		Node tmp = root;
		while (tmp != null) {
			System.out.println(tmp.d);
			tmp. = tmp;
		}
	}*/

	void inorder(Node root)
	{
		inorder(root.left);
		System.out.println(root.d);
		
		inorder(root.right);
	}
	void preorder(Node root)
	{
		preorder(root.left);
		preorder(root.right);
		System.out.println(root.d);
	}
	void postorder(Node root)
	{
		
		System.out.println();
		postorder(root.left);
		postorder(root.right);
	}
	public static void main(String[] args) {
		LinkedList ll = new LinkedList();
		BST bst = new BST();
		bst.insertData(5, ll.root);
		bst.insertData(4, ll.root);
		bst.insertData(6, ll.root);
		bst.insertData(2, ll.root);
		
		bst.inorder(ll.root);
	}
}

class LinkedList {
	Node root;

	static class Node {
		int d;
		Node left;
		Node right;

		public Node(int x) {
			d = x;
			left = right = null;
		}

	}
}